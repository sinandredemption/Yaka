#include "score.h"

// Note: The scores aren't tuned
namespace Scores {
  Score PawnValue(1000, 1250);
  Score KnightValue(4150, 4250);
  Score BishopValue(4310, 4425);
  Score RookValue(6200, 6240);
  Score QueenValue(12775, 12960);

  Score PieceVal[Piece::PIECE_TYPE_NB] {
    PawnValue, KnightValue, BishopValue, RookValue, QueenValue, Score(0, 0)
  };

#define S(a, b) { a , b }

  // Pawns
  Score BackwardPawnPenalty(175, 180);
  Score DoubledPawnPenalty[Square::FILE_NB] = {
    S(65, 208), S(101, 232), S(116, 232), S(116, 232),
    S(116, 232), S(116, 232), S(101, 232), S(65, 208)
  };

  Score IsolatedPawnPenalty[Square::FILE_NB] = {
    S(156, 179), S(227, 208), S(252, 208), S(252, 208),
    S(252, 208), S(252, 208), S(227, 208), S(156, 179)
  };

  Score ConnectedPawnBonus[Square::RANK_NB] = {
    S(0, 0), S(12, 12), S(50, 50), S(62, 62),
    S(175, 175), S(250, 250), S(437, 437), S(0, 0),
  };

  Score WeakPawnPenalty(110, 55);
  Score PassedPawnBonus[Square::RANK_NB] = {
    S(0, 0), S(35, 35), S(55, 55), S(150, 130), S(300, 250), S(615, 500), S(1220, 990)
  };
  Score SupportedPasserBonus(40, 50);
  Score PasserCanAdvance(30, 40);
  Score PasserBlocked(5, 4);
  Score PasserNotBlocked(10, 8);
  Score PasserPathClear(20, 30);

  Score MobilityBonus[][28] = {
    {
      S(-341, -312), S(-219, -180), S(-36, -48), S(12, 0), S(85, 60),
      S(146, 132), S(207, 180), S(231, 204), S(244, 216) \
    }, {
      S(-262, -182), S(-141, -89), S(30, 3), S(101, 58), S(171, 112),
      S(242, 166), S(303, 213), S(343, 244), S(373, 263), S(388, 279),
      S(404, 290), S(414, 298), S(424, 306), S(434, 313)
    }, {
      S(-250, -268), S(-162, -124), S(-12, 0), S(0, 86), S(37, 163),
      S(75, 249), S(100, 335), S(125, 412), S(150, 499), S(162, 566),
      S(175, 595), S(187, 614), S(200, 633), S(200, 642), S(212, 642)
    }, {
      S(-225, -201), S(-150, -105), S(-12, -28), S(0, 0), S(37, 47), S(62, 95),
      S(75, 143), S(100, 201), S(112, 211), S(112, 211), S(125, 211), S(125, 211),
      S(125, 211), S(125, 211), S(137, 211), S(137, 211), S(137, 211), S(137, 211),
      S(137, 211), S(137, 211), S(137, 211), S(137, 211), S(137, 211), S(137, 211),
      S(137, 211), S(137, 211), S(137, 211), S(137, 211)
    }
  };

  Score OutpostBonus[2][Square::SQ_NB] = {
    {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(48, 12), S(170, 42), S(170, 42), S(170, 42), S(170, 42), S(48, 12), S(0, 0),
      S(0, 0), S(73, 18), S(244, 60), S(341, 84), S(341, 84), S(244, 60), S(73, 18), S(0, 0),
      S(0, 0), S(48, 12), S(170, 42), S(244, 60), S(244, 60), S(170, 42), S(48, 12), S(0, 0),
      S(0, 0), S(0, 0), S(48, 12), S(73, 18), S(73, 18), S(48, 12), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)
    }, {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(50, 9), S(50, 9), S(50, 9), S(50, 9), S(0, 0), S(0, 0),
      S(0, 0), S(50, 9), S(101, 19), S(101, 19), S(101, 19), S(101, 19), S(50, 9), S(0, 0),
      S(0, 0), S(101, 19), S(212, 40), S(212, 40), S(212, 40), S(212, 40), S(101, 19), S(0, 0),
      S(0, 0), S(50, 9), S(80, 15), S(80, 15), S(80, 15), S(80, 15), S(50, 9), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
    }
  };

  int SafetyTable[100] = {
    0, 10, 20, 30, 50, 70, 90, 120, 150,
    220, 260, 300, 350, 390, 440, 500, 560, 620,
    750, 820, 850, 890, 970, 1050, 1130, 1220, 1310,
    1500, 1690, 1800, 1910, 2020, 2130, 2250, 2370, 2480,
    2720, 2830, 2950, 3070, 3190, 3300, 3420, 3540, 3660,
    3890, 4010, 4120, 4240, 4360, 4480, 4590, 4710, 4830,
    5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000,
    5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000,
    5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000,
    5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000
  };

  Score BishopPairBonus(450, 625);
  Score RookOnOpenFile(175, 85);
  Score RookOnSemiOpenFile(80, 50);

  Score ThreatBonus[2][12][Piece::PIECE_TYPE_NB][Square::SQ_NB];
  Score HangingPenalty(130, 100);

  Score PtSqTab[Piece::PIECE_TYPE_NB][Square::SQ_NB] = {
    { // Pawns
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), // Rank 8...
      S(87, 275), S(175, 437), S(262, 487), S(350, 487), S(350, 487), S(262, 487), S(175, 437), S(87, 275),
      S(37, 187), S(125, 350), S(212, 375), S(300, 375), S(300, 375), S(212, 375), S(125, 350), S(37, 187),
      S(-37, 50), S(37, 262), S(112, 262), S(212, 262), S(212, 262), S(112, 262), S(37, 262), S(-37, 50),
      S(-50, -87), S(37, 112), S(50, 112), S(175, 112), S(175, 112), S(50, 112), S(37, 112), S(-50, -87),
      S(-50, -175), S(37, 37), S(25, 37), S(50, 37), S(50, 37), S(25, 37), S(37, 37), S(-50, -175),
      S(-50, -200), S(37, 0), S(37, 0), S(-150, 0), S(-150, 0), S(37, 0), S(37, 0), S(-50, -200),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)  // ....Rank 1
    },
    { // Knight
      S(-637, -525), S(-487, -425), S(-375, -300), S(-287, -137), S(-287, -137), S(-375, -300), S(-487, -425), S(-637, -525),
      S(-437, -387), S(-262, -300), S(-87, -87), S(0, 37), S(0, 37), S(-87, -87), S(-262, -300), S(-437, -387),
      S(-275, -237), S(-25, -50), S(50, 37), S(112, 162), S(112, 162), S(50, 37), S(-25, -50), S(-275, -237),
      S(-150, -187), S(37, -50), S(162, 62), S(250, 212), S(250, 212), S(162, 62), S(37, -50), S(-150, -187),
      S(-162, -187), S(37, -50), S(112, 25), S(237, 212), S(237, 212), S(112, 25), S(37, -50), S(-162, -187),
      S(-125, -237), S(37, -137), S(150, 0), S(175, 75), S(175, 75), S(150, 0), S(37, -137), S(-125, -237),
      S(-375, -387), S(-200, -300), S(-25, -87), S(37, 37), S(37, 37), S(-25, -87), S(-200, -300), S(-375, -387),
      S(-775, -525), S(-375, -425), S(-262, -300), S(-175, -137), S(-175, -137), S(-262, -300), S(-375, -425), S(-775, -525),
    },
    { // Bishop
      S(-125, -150), S(-50, -87), S(-75, -100), S(-100, -50), S(-100, -50), S(-75, -100), S(-50, -87), S(-125, -150),
      S(-62, -100), S(37, -25), S(12, -37), S(0, 0), S(0, 0), S(12, -37), S(37, -25), S(-62, -100),
      S(-37, -75), S(50, 0), S(50, 0), S(25, 37), S(25, 37), S(50, 0), S(50, 0), S(-37, -75),
      S(-37, -75), S(50, -12), S(50, 0), S(25, 25), S(25, 25), S(50, 0), S(50, -12), S(-37, -75),
      S(-37, -75), S(50, -12), S(37, 0), S(12, 25), S(12, 25), S(37, 0), S(50, -12), S(-37, -75),
      S(-62, -75), S(37, 0), S(25, 0), S(0, 37), S(0, 37), S(25, 0), S(37, 0), S(-62, -75),
      S(-75, -100), S(37, -25), S(0, -37), S(0, 0), S(0, 0), S(0, -37), S(37, -25), S(-75, -100),
      S(-137, -150), S(-75, -87), S(-100, -100), S(-112, -50), S(-112, -50), S(-100, -100), S(-75, -87), S(-137, -150),
    },
    { // Rook
      S(0, 50), S(12, 62), S(37, 75), S(50, 75), S(50, 75), S(37, 75), S(12, 62), S(0, 50),
      S(62, 125), S(125, 150), S(137, 150), S(137, 150), S(137, 150), S(137, 150), S(125, 150), S(62, 125),
      S(-37, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(-37, 0),
      S(-37, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(-37, 0),
      S(-50, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(-50, 0),
      S(-50, 0), S(0, 0), S(0, 0), S(12, 12), S(12, 12), S(0, 0), S(0, 0), S(-50, 0),
      S(-25, 0), S(12, 12), S(50, 25), S(50, 25), S(50, 25), S(50, 25), S(12, 12), S(-25, 0),
      S(-37, 0), S(-12, 25), S(0, 25), S(0, 25), S(0, 25), S(0, 25), S(-12, 25), S(-37, 0),
    },
    { // Queen
      S(-37, -237), S(-12, -150), S(0, -87), S(0, -62), S(0, -62), S(0, -87), S(-12, -150), S(-37, -237),
      S(-12, -150), S(25, -62), S(50, 0), S(50, 12), S(50, 12), S(50, 0), S(25, -62), S(-12, -150),
      S(0, -87), S(50, 0), S(50, 12), S(50, 37), S(50, 37), S(50, 12), S(50, 0), S(0, -87),
      S(0, -62), S(50, 12), S(50, 37), S(50, 75), S(50, 75), S(50, 37), S(50, 12), S(0, -62),
      S(0, -62), S(50, 12), S(50, 37), S(50, 75), S(50, 75), S(50, 37), S(50, 12), S(0, -62),
      S(0, -87), S(50, 0), S(50, 12), S(50, 37), S(50, 37), S(50, 12), S(50, 0), S(0, -87),
      S(-12, -150), S(25, -62), S(50, 0), S(50, 12), S(50, 12), S(50, 0), S(25, -62), S(-12, -150),
      S(-37, -237), S(-12, -150), S(0, -87), S(0, -62), S(0, -62), S(0, -87), S(-12, -150), S(-37, -237),
    },
    { // King
      S(-212, 0), S(-350, 12), S(-412, 37), S(-412, 50), S(-412, 50), S(-412, 37), S(-350, 12), S(-212, 0),
      S(-212, 12), S(-350, 37), S(-412, 50), S(-412, 62), S(-412, 62), S(-412, 50), S(-350, 37), S(-212, 12),
      S(-250, 37), S(-350, 50), S(-412, 62), S(-462, 87), S(-462, 87), S(-412, 62), S(-350, 50), S(-250, 37),
      S(-150, 50), S(-300, 62), S(-350, 87), S(-412, 100), S(-412, 100), S(-350, 87), S(-300, 62), S(-150, 50),
      S(-87, 50), S(-150, 62), S(-200, 87), S(-250, 100), S(-250, 100), S(-200, 87), S(-150, 62), S(-87, 50),
      S(37, 37), S(-12, 50), S(-37, 62), S(-150, 87), S(-150, 87), S(-37, 62), S(-12, 50), S(37, 37),
      S(162, 12), S(150, 37), S(75, 50), S(-12, 62), S(-12, 62), S(75, 50), S(150, 37), S(162, 12),
      S(250, 0), S(250, 12), S(87, 37), S(0, 50), S(0, 50), S(87, 37), S(250, 12), S(250, 0),
    }
  };

#undef S

  Score PcSqTab[12][Square::SQ_NB];

  void init()
  {
    Piece::Type pc;
    Piece::PieceType pt;
    Square::Type sq;

    for (pc = Piece::WHITE_PAWN; pc <= Piece::BLACK_KING; ++pc)
      for (sq = Square::A1; sq < Square::SQ_NB; ++sq) {
        Color::Type cl = Piece::color_of(pc);
        Square::Type flip_sq = Square::Type(sq ^ (56 * (cl == Color::WHITE))); // Flip the square for white
        PcSqTab[pc][sq] = PtSqTab[Piece::piece_type(pc)][flip_sq];
        PcSqTab[pc][sq] += PieceVal[Piece::piece_type(pc)];
      }

    std::memset(ThreatBonus, 0, sizeof(ThreatBonus));
    for (pc = Piece::WHITE_KNIGHT; pc < Piece::WHITE_KING; ++pc)
      for (pt = Piece::PAWN + 1; pt < Piece::KING; ++pt)
        for (sq = Square::A1; sq < Square::SQ_NB; ++sq) {
          // FIXME: Highly uneven!!!
          Color::Type us = Piece::color_of(pc);
          Score OwnVal = PcSqTab[pc][sq];
          Score OppVal = PcSqTab[Piece::make_piece(pt, ~us)][sq];

          double ratio = OppVal.mg / double(OwnVal.mg);
          if (ratio < 1)
            ratio += 1, ratio *= ratio;
          ratio = std::pow(ratio, 3);

          ThreatBonus[1][pc][pt][sq].mg = (int)(ratio + .5);
          if (ratio < 10)
            ratio *= ratio;
          ThreatBonus[0][pc][pt][sq].mg = (int)(ratio + .5);

          ratio = OppVal.eg / double(OwnVal.eg);
          if (ratio < 1)
            ratio += 1, ratio *= ratio;
          ratio = std::pow(ratio, 3);

          ThreatBonus[1][pc][pt][sq].eg = (int)(ratio + .5);
          if (ratio < 10)
            ratio *= ratio;
          ThreatBonus[0][pc][pt][sq].eg = (int)(ratio + .5);
        }
  }
}